
plugin zep_iospp;

import std_sound_output_device;
import std_defs;

SPP trigger_device
{
    on_event:init()
    {
        spp_set_update_interval(1ms);
        open(test::SPP_DEV);
        data_is_output = true;
        if (error())
            terminate;
    }

    on_event:cleanup()
    {
        write_data(0x00);
        close();
    }

    void trigger(int number, time t, dur d)
    {
        start_data(number, t);
        stop_data(0, t + d);
    }
}

SoundPlayback playback
{
    on_event:init()
    {
        device = sound_output_device;
        scaling_all = 0.99;
    }


    on_event:finish()
    {
        done(CONTINUE);
    }
    
    BeepGenerator beep
    {
    }

    void done(int msgid)
    {
        signal_target(msgid);
        target = null;
    }

    void action(Part part, real freq, time t, dur d)
    {
        beep.frequency_all = freq;
        beep.duration = d;
        target = part;
        start(t);
    }
}

Block task
{
    on_event:entry()
    {
        reference_time = now();
        num_cycles = 1;
    }

    on_event:exit()
    {
        println("exiting");
        terminate;
    }

    Block stimuli
    {
        on_event:entry()
        {
            num_cycles = test::NUMBER;
        }

        Trial
        {
            on_event:entry()
            {
                playback.action(
                    this,
                    test::FREQ,
                    reference_time + test::ISI,
                    test::STIM_DUR
                    );

                trigger_device.trigger(
                    255,
                    reference_time + test::ISI,
                    test::TRIG_DUR
                    );
            }
        }
    }
}


on_event:start()
{
    println("Experiment started.");
    task.enter(null);
}
